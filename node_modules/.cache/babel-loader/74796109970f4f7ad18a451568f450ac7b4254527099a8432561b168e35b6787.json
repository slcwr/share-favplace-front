{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// CartItem 型の定義（仮の例）\n\n// const initialState: CartState = {\n//   cartItems: CartItems,\n//   total: 0,\n//   amount: 0,\n// };\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    clearCart: state => {\n      state.cartItems = state.cartItems.map(item => {\n        item.amount = 0;\n        return item;\n      });\n    },\n    removeItem: (state, action) => {\n      state.cartItems = state.cartItems.map(item => {\n        if (item.id === action.payload) item.amount = 0;\n        return item;\n      });\n    },\n    addItem: (state, action) => {\n      const newItem = {\n        ...action.payload,\n        id: state.cartItems.length + 1,\n        amount: 0\n      };\n      state.cartItems.push(newItem);\n    },\n    increase: (state, action) => {\n      const cartItem = state.cartItems.find(item => item.id === action.payload);\n      if (cartItem) {\n        cartItem.amount += 1;\n      }\n    },\n    decrease: (state, action) => {\n      const cartItem = state.cartItems.find(item => item.id === action.payload);\n      if (cartItem) {\n        cartItem.amount -= 1;\n      }\n    },\n    calculateTotals: state => {\n      let amount = 0;\n      let total = 0;\n      state.cartItems.forEach(item => {\n        amount += item.amount;\n        total += item.amount * item.price;\n      });\n      state.amount = amount;\n      state.total = total;\n    }\n  }\n});\nexport const {\n  clearCart,\n  removeItem,\n  addItem,\n  increase,\n  decrease,\n  calculateTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","reducers","clearCart","state","cartItems","map","item","amount","removeItem","action","id","payload","addItem","newItem","length","push","increase","cartItem","find","decrease","calculateTotals","total","forEach","price","actions","reducer"],"sources":["/app/src/features/cart/cartSlice.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport CartItems from '../../CartItem';\n\n// CartItem 型の定義（仮の例）\ninterface CartItem {\n  id?: number;\n  title: string;\n  price: number;\n  img: string;\n  amount?: number;\n}\n\ninterface CartState {\n  cartItems: CartItem[];\n  total: number;\n  amount: number;\n}\n\n// const initialState: CartState = {\n//   cartItems: CartItems,\n//   total: 0,\n//   amount: 0,\n// };\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    clearCart: (state) => {\n      state.cartItems = state.cartItems.map((item) => {\n        item.amount = 0;\n        return item;\n      });\n    },\n    removeItem: (state, action: PayloadAction<number>) => {\n      state.cartItems = state.cartItems.map((item) => {\n        if (item.id === action.payload) item.amount = 0;\n        return item;\n      });\n    },\n    addItem: (state, action: PayloadAction<CartItem>) => {\n      const newItem = { ...action.payload, id: state.cartItems.length + 1, amount: 0 };\n      state.cartItems.push(newItem);\n    },\n    increase: (state, action: PayloadAction<number>) => {\n      const cartItem = state.cartItems.find((item) => item.id === action.payload);\n      if (cartItem) {\n        cartItem.amount += 1;\n      }\n    },\n    decrease: (state, action: PayloadAction<number>) => {\n      const cartItem = state.cartItems.find((item) => item.id === action.payload);\n      if (cartItem) {\n        cartItem.amount -= 1;\n      }\n    },\n    calculateTotals: (state) => {\n      let amount = 0;\n      let total = 0;\n      state.cartItems.forEach((item) => {\n        amount += item.amount;\n        total += item.amount * item.price;\n      });\n      state.amount = amount;\n      state.total = total;\n    },\n  },\n});\n\nexport const { clearCart, removeItem, addItem, increase, decrease, calculateTotals } = cartSlice.actions;\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAG7D;;AAeA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY;EACZC,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACC,SAAS,CAACC,GAAG,CAAEC,IAAI,IAAK;QAC9CA,IAAI,CAACC,MAAM,GAAG,CAAC;QACf,OAAOD,IAAI;MACb,CAAC,CAAC;IACJ,CAAC;IACDE,UAAU,EAAEA,CAACL,KAAK,EAAEM,MAA6B,KAAK;MACpDN,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACC,SAAS,CAACC,GAAG,CAAEC,IAAI,IAAK;QAC9C,IAAIA,IAAI,CAACI,EAAE,KAAKD,MAAM,CAACE,OAAO,EAAEL,IAAI,CAACC,MAAM,GAAG,CAAC;QAC/C,OAAOD,IAAI;MACb,CAAC,CAAC;IACJ,CAAC;IACDM,OAAO,EAAEA,CAACT,KAAK,EAAEM,MAA+B,KAAK;MACnD,MAAMI,OAAO,GAAG;QAAE,GAAGJ,MAAM,CAACE,OAAO;QAAED,EAAE,EAAEP,KAAK,CAACC,SAAS,CAACU,MAAM,GAAG,CAAC;QAAEP,MAAM,EAAE;MAAE,CAAC;MAChFJ,KAAK,CAACC,SAAS,CAACW,IAAI,CAACF,OAAO,CAAC;IAC/B,CAAC;IACDG,QAAQ,EAAEA,CAACb,KAAK,EAAEM,MAA6B,KAAK;MAClD,MAAMQ,QAAQ,GAAGd,KAAK,CAACC,SAAS,CAACc,IAAI,CAAEZ,IAAI,IAAKA,IAAI,CAACI,EAAE,KAAKD,MAAM,CAACE,OAAO,CAAC;MAC3E,IAAIM,QAAQ,EAAE;QACZA,QAAQ,CAACV,MAAM,IAAI,CAAC;MACtB;IACF,CAAC;IACDY,QAAQ,EAAEA,CAAChB,KAAK,EAAEM,MAA6B,KAAK;MAClD,MAAMQ,QAAQ,GAAGd,KAAK,CAACC,SAAS,CAACc,IAAI,CAAEZ,IAAI,IAAKA,IAAI,CAACI,EAAE,KAAKD,MAAM,CAACE,OAAO,CAAC;MAC3E,IAAIM,QAAQ,EAAE;QACZA,QAAQ,CAACV,MAAM,IAAI,CAAC;MACtB;IACF,CAAC;IACDa,eAAe,EAAGjB,KAAK,IAAK;MAC1B,IAAII,MAAM,GAAG,CAAC;MACd,IAAIc,KAAK,GAAG,CAAC;MACblB,KAAK,CAACC,SAAS,CAACkB,OAAO,CAAEhB,IAAI,IAAK;QAChCC,MAAM,IAAID,IAAI,CAACC,MAAM;QACrBc,KAAK,IAAIf,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACiB,KAAK;MACnC,CAAC,CAAC;MACFpB,KAAK,CAACI,MAAM,GAAGA,MAAM;MACrBJ,KAAK,CAACkB,KAAK,GAAGA,KAAK;IACrB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEnB,SAAS;EAAEM,UAAU;EAAEI,OAAO;EAAEI,QAAQ;EAAEG,QAAQ;EAAEC;AAAgB,CAAC,GAAGtB,SAAS,CAAC0B,OAAO;AACxG,eAAe1B,SAAS,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}