{"ast":null,"code":"import { get as r } from \"react-hook-form\";\nvar t = function (t, n, e) {\n    if (t && \"reportValidity\" in t) {\n      var i = r(e, n);\n      t.setCustomValidity(i && i.message || \"\"), t.reportValidity();\n    }\n  },\n  n = function (r, n) {\n    var e = function (e) {\n      var i = n.fields[e];\n      i && i.ref && \"reportValidity\" in i.ref ? t(i.ref, e, r) : i.refs && i.refs.forEach(function (n) {\n        return t(n, e, r);\n      });\n    };\n    for (var i in n.fields) e(i);\n  },\n  e = function (r) {\n    return r instanceof Date;\n  },\n  i = function (r) {\n    return null == r;\n  },\n  a = function (r) {\n    return \"object\" == typeof r;\n  },\n  o = function (r) {\n    return !i(r) && !Array.isArray(r) && a(r) && !e(r);\n  },\n  f = function (r) {\n    return /^\\w*$/.test(r);\n  },\n  s = function (r, t, n) {\n    for (var e = -1, i = f(t) ? [t] : function (r) {\n        return t = r.replace(/[\"|']|\\]/g, \"\").split(/\\.|\\[/), Array.isArray(t) ? t.filter(Boolean) : [];\n        var t;\n      }(t), a = i.length, s = a - 1; ++e < a;) {\n      var u = i[e],\n        c = n;\n      if (e !== s) {\n        var l = r[u];\n        c = o(l) || Array.isArray(l) ? l : isNaN(+i[e + 1]) ? {} : [];\n      }\n      r[u] = c, r = r[u];\n    }\n    return r;\n  },\n  u = function (t, e) {\n    e.shouldUseNativeValidation && n(t, e);\n    var i = {};\n    for (var a in t) {\n      var o = r(e.fields, a),\n        f = Object.assign(t[a] || {}, {\n          ref: o && o.ref\n        });\n      if (c(e.names || Object.keys(t), a)) {\n        var u = Object.assign({}, r(i, a));\n        s(u, \"root\", f), s(i, a, u);\n      } else s(i, a, f);\n    }\n    return i;\n  },\n  c = function (r, t) {\n    return r.some(function (r) {\n      return r.startsWith(t + \".\");\n    });\n  };\nexport { e as isDateObject, f as isKey, i as isNullOrUndefined, o as isObject, a as isObjectType, u as toNestErrors, n as validateFieldsNatively };","map":{"version":3,"names":["t","setCustomValidity","n","e","i","r","message","reportValidity","validateFieldsNatively","fields","ref","refs","forEach","isDateObject","Date","isNullOrUndefined","a","isObjectType","o","isObject","Array","isArray","f","isKey","test","s","set","replace","split","filter","Boolean","length","u","c","l","isNaN","toNestErrors","shouldUseNativeValidation","Object","assign","names","keys","isNameInFieldArray","some","startsWith"],"sources":["/app/node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","/app/node_modules/@hookform/resolvers/src/toNestErrors.ts"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const isDateObject = (value: unknown): value is Date => value instanceof Date;\n\nexport const isNullOrUndefined = (value: unknown): value is null | undefined => value == null;\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport const isObject = <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n\nexport const isKey = (value: string) => /^\\w*$/.test(value);\n\nconst compact = <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n\nconst stringToPath = (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nconst set = (object: FieldValues, path: string, value?: unknown) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}